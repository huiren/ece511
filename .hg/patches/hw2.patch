# HG changeset patch
# Parent  4329fba9b59031c2345c28009fc3983865f5e28d

diff --git a/build/ARM/params/GShareBP.hh b/build/ARM/params/GShareBP.hh
new file mode 100644
--- /dev/null
+++ b/build/ARM/params/GShareBP.hh
@@ -0,0 +1,21 @@
+#ifndef __PARAMS__GShareBP__
+#define __PARAMS__GShareBP__
+
+class GShareBP;
+
+#include <cstddef>
+#include "base/types.hh"
+#include <cstddef>
+#include "base/types.hh"
+
+#include "params/BranchPredictor.hh"
+
+struct GShareBPParams
+    : public BranchPredictorParams
+{
+    GShareBP * create();
+    unsigned globalCtrBits;
+    unsigned globalPredictorSize;
+};
+
+#endif // __PARAMS__GShareBP__
diff --git a/build/ARM/params/YagsBP.hh b/build/ARM/params/YagsBP.hh
new file mode 100644
--- /dev/null
+++ b/build/ARM/params/YagsBP.hh
@@ -0,0 +1,27 @@
+#ifndef __PARAMS__YagsBP__
+#define __PARAMS__YagsBP__
+
+class YagsBP;
+
+#include <cstddef>
+#include "base/types.hh"
+#include <cstddef>
+#include "base/types.hh"
+#include <cstddef>
+#include "base/types.hh"
+#include <cstddef>
+#include "base/types.hh"
+
+#include "params/BranchPredictor.hh"
+
+struct YagsBPParams
+    : public BranchPredictorParams
+{
+    YagsBP * create();
+    unsigned choiceCtrBits;
+    unsigned choicePredictorSize;
+    unsigned globalCtrBits;
+    unsigned globalPredictorSize;
+};
+
+#endif // __PARAMS__YagsBP__
diff --git a/configs/common/O3_ARM_v7a.py b/configs/common/O3_ARM_v7a.py
--- a/configs/common/O3_ARM_v7a.py
+++ b/configs/common/O3_ARM_v7a.py
@@ -88,6 +88,7 @@
               O3_ARM_v7a_Load(), O3_ARM_v7a_Store(), O3_ARM_v7a_FP()]
 
 # Bi-Mode Branch Predictor
+'''
 class O3_ARM_v7a_BP(BiModeBP):
     globalPredictorSize = 8192
     globalCtrBits = 2
@@ -97,6 +98,50 @@
     BTBTagSize = 18
     RASSize = 16
     instShiftAmt = 2
+'''
+'''
+
+class O3_ARM_v7a_BP(GShareBP):
+    globalPredictorSize = 4096
+    globalCtrBits = 2
+    BTBEntries = 2048
+    BTBTagSize = 18
+    RASSize = 16
+    instShiftAmt = 2
+'''
+'''
+class O3_ARM_v7a_BP(LocalBP):
+    localPredictorSize = 2048
+    localCtrBits = 2
+    BTBEntries = 2048
+    BTBTagSize = 18
+    RASSize = 16
+    instShiftAmt = 2
+'''
+'''
+class O3_ARM_v7a_BP(TournamentBP):
+    localPredictorSize = 2048
+    localCtrBits = 2
+    localHistoryTableSize = 2048
+    globalPredictorSize = 8192
+    globalCtrBits = 2
+    choicePredictorSize = 8192
+    choiceCtrBits = 2
+    BTBEntries = 2048
+    BTBTagSize = 18
+    RASSize = 16
+    instShiftAmt = 2
+'''
+
+class O3_ARM_v7a_BP(YagsBP):
+    globalPredictorSize = 2048
+    globalCtrBits = 2
+    choicePredictorSize = 4096
+    choiceCtrBits = 2
+    BTBEntries = 2048
+    BTBTagSize = 18
+    RASSize = 16
+    instShiftAmt = 2
 
 class O3_ARM_v7a_3(DerivO3CPU):
     LQEntries = 16
diff --git a/src/cpu/pred/BranchPredictor.py b/src/cpu/pred/BranchPredictor.py
--- a/src/cpu/pred/BranchPredictor.py
+++ b/src/cpu/pred/BranchPredictor.py
@@ -86,3 +86,22 @@
     choicePredictorSize = Param.Unsigned(8192, "Size of choice predictor")
     choiceCtrBits = Param.Unsigned(2, "Bits of choice counters")
 
+
+class GShareBP(BranchPredictor):
+    type = 'GShareBP'
+    cxx_class = 'GShareBP'
+    cxx_header = "cpu/pred/gshare.hh"
+
+    globalPredictorSize = Param.Unsigned(4096, "Size of global predictor")
+    globalCtrBits = Param.Unsigned(2, "Bits per counter")
+
+
+class YagsBP(BranchPredictor):
+    type = 'YagsBP'
+    cxx_class = 'YagsBP'
+    cxx_header = "cpu/pred/yags.hh"
+
+    globalPredictorSize = Param.Unsigned(2048, "Size of global predictor")
+    globalCtrBits = Param.Unsigned(2, "Bits per counter")
+    choicePredictorSize = Param.Unsigned(4096, "Size of choice predictor")
+    choiceCtrBits = Param.Unsigned(2, "Bits of choice counters")
diff --git a/src/cpu/pred/SConscript b/src/cpu/pred/SConscript
--- a/src/cpu/pred/SConscript
+++ b/src/cpu/pred/SConscript
@@ -43,6 +43,8 @@
 Source('ras.cc')
 Source('tournament.cc')
 Source ('bi_mode.cc')
+Source('gshare.cc')
+Source('yags.cc')
 DebugFlag('FreeList')
 DebugFlag('Branch')
 DebugFlag('LTage')
diff --git a/src/cpu/pred/gshare.cc b/src/cpu/pred/gshare.cc
new file mode 100644
--- /dev/null
+++ b/src/cpu/pred/gshare.cc
@@ -0,0 +1,194 @@
+/*
+ * Copyright (c) 2014 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Anthony Gutierrez
+ */
+
+/* @file
+ * Implementation of a bi-mode branch predictor
+ */
+
+#include "base/bitfield.hh"
+#include "base/intmath.hh"
+#include "cpu/pred/gshare.hh"
+
+GShareBP::GShareBP(const GShareBPParams *params)
+    : BPredUnit(params),
+      globalHistoryReg(params->numThreads, 0),
+      globalHistoryBits(ceilLog2(params->globalPredictorSize)),
+      globalPredictorSize(params->globalPredictorSize),
+      globalCtrBits(params->globalCtrBits)
+{
+    
+    if (!isPowerOf2(globalPredictorSize))
+        fatal("Invalid global history predictor size.\n");
+
+    
+    takenCounters.resize(globalPredictorSize);
+
+    for (int i = 0; i < globalPredictorSize; ++i) {
+        takenCounters[i].setBits(globalCtrBits);
+    }
+
+    historyRegisterMask = mask(globalHistoryBits);
+    globalHistoryMask = globalPredictorSize - 1;
+
+    takenThreshold = (ULL(1) << (globalCtrBits - 1)) - 1;
+}
+
+/*
+ * For an unconditional branch we set its history such that
+ * everything is set to taken. I.e., its choice predictor
+ * chooses the taken array and the taken array predicts taken.
+ */
+void
+GShareBP::uncondBranch(ThreadID tid, Addr pc, void * &bpHistory)
+{
+    BPHistory *history = new BPHistory;
+    history->globalHistoryReg = globalHistoryReg[tid];
+    history->finalPred = true;
+    bpHistory = static_cast<void*>(history);
+    updateGlobalHistReg(tid, true);
+}
+
+void
+GShareBP::squash(ThreadID tid, void *bpHistory)
+{
+    BPHistory *history = static_cast<BPHistory*>(bpHistory);
+    globalHistoryReg[tid] = history->globalHistoryReg;
+
+    delete history;
+}
+
+/*
+ * Here we lookup the actual branch prediction. We use the PC to
+ * identify the bias of a particular branch, which is based on the
+ * prediction in the choice array. A hash of the global history
+ * register and a branch's PC is used to index into both the taken
+ * and not-taken predictors, which both present a prediction. The
+ * choice array's prediction is used to select between the two
+ * direction predictors for the final branch prediction.
+ */
+bool
+GShareBP::lookup(ThreadID tid, Addr branchAddr, void * &bpHistory)
+{
+    unsigned globalHistoryIdx = (((branchAddr >> instShiftAmt)
+                                ^ globalHistoryReg[tid])
+                                & globalHistoryMask);
+
+    assert(globalHistoryIdx < globalPredictorSize);
+
+    bool takenGHBPrediction = takenCounters[globalHistoryIdx].read()
+                              > takenThreshold;
+
+    bool finalPrediction;
+
+    BPHistory *history = new BPHistory;
+    history->globalHistoryReg = globalHistoryReg[tid];
+    
+    finalPrediction = takenGHBPrediction;
+
+    history->finalPred = finalPrediction;
+    bpHistory = static_cast<void*>(history);
+    updateGlobalHistReg(tid, finalPrediction);
+
+    return finalPrediction;
+}
+
+void
+GShareBP::btbUpdate(ThreadID tid, Addr branchAddr, void * &bpHistory)
+{
+    globalHistoryReg[tid] &= (historyRegisterMask & ~ULL(1));
+}
+
+/* Only the selected direction predictor will be updated with the final
+ * outcome; the status of the unselected one will not be altered. The choice
+ * predictor is always updated with the branch outcome, except when the
+ * choice is opposite to the branch outcome but the selected counter of
+ * the direction predictors makes a correct final prediction.
+ */
+void
+GShareBP::update(ThreadID tid, Addr branchAddr, bool taken, void *bpHistory,
+                 bool squashed)
+{
+    if (bpHistory) {
+        BPHistory *history = static_cast<BPHistory*>(bpHistory);
+
+        unsigned globalHistoryIdx = (((branchAddr >> instShiftAmt)
+                                    ^ history->globalHistoryReg)
+                                    & globalHistoryMask);
+
+        assert(globalHistoryIdx < globalPredictorSize);
+
+        
+        // if the taken array's prediction was used, update it
+        if (taken) {
+            takenCounters[globalHistoryIdx].increment();
+        } else {
+            takenCounters[globalHistoryIdx].decrement();
+        }
+        
+
+        if (squashed) {
+            if (taken) {
+                globalHistoryReg[tid] = (history->globalHistoryReg << 1) | 1;
+            } else {
+                globalHistoryReg[tid] = (history->globalHistoryReg << 1);
+            }
+            globalHistoryReg[tid] &= historyRegisterMask;
+        } else {
+            delete history;
+        }
+    }
+}
+
+void
+GShareBP::retireSquashed(ThreadID tid, void *bp_history)
+{
+    BPHistory *history = static_cast<BPHistory*>(bp_history);
+    delete history;
+}
+
+unsigned
+GShareBP::getGHR(ThreadID tid, void *bp_history) const
+{
+    return static_cast<BPHistory*>(bp_history)->globalHistoryReg;
+}
+
+void
+GShareBP::updateGlobalHistReg(ThreadID tid, bool taken)
+{
+    globalHistoryReg[tid] = taken ? (globalHistoryReg[tid] << 1) | 1 :
+                               (globalHistoryReg[tid] << 1);
+    globalHistoryReg[tid] &= historyRegisterMask;
+}
+
+GShareBP*
+GShareBPParams::create()
+{
+    return new GShareBP(this);
+}
diff --git a/src/cpu/pred/gshare.hh b/src/cpu/pred/gshare.hh
new file mode 100644
--- /dev/null
+++ b/src/cpu/pred/gshare.hh
@@ -0,0 +1,115 @@
+/*
+ * Copyright (c) 2014 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Anthony Gutierrez
+ */
+
+/* @file
+ * Implementation of a bi-mode branch predictor
+ */
+
+#ifndef __CPU_PRED_GSHARE_PRED_HH__
+#define __CPU_PRED_GSHARE_PRED_HH__
+
+#include "cpu/pred/bpred_unit.hh"
+#include "cpu/pred/sat_counter.hh"
+#include "params/GShareBP.hh"
+
+/**
+ * Implements a bi-mode branch predictor. The bi-mode predictor is a two-level
+ * branch predictor that has three seprate history arrays: a taken array, a
+ * not-taken array, and a choice array. The taken/not-taken arrays are indexed
+ * by a hash of the PC and the global history. The choice array is indexed by
+ * the PC only. Because the taken/not-taken arrays use the same index, they must
+ * be the same size.
+ *
+ * The bi-mode branch predictor aims to eliminate the destructive aliasing that
+ * occurs when two branches of opposite biases share the same global history
+ * pattern. By separating the predictors into taken/not-taken arrays, and using
+ * the branch's PC to choose between the two, destructive aliasing is reduced.
+ */
+
+class GShareBP : public BPredUnit
+{
+  public:
+    GShareBP(const GShareBPParams *params);
+    void uncondBranch(ThreadID tid, Addr pc, void * &bp_history);
+    void squash(ThreadID tid, void *bp_history);
+    bool lookup(ThreadID tid, Addr branch_addr, void * &bp_history);
+    void btbUpdate(ThreadID tid, Addr branch_addr, void * &bp_history);
+    void update(ThreadID tid, Addr branch_addr, bool taken, void *bp_history,
+                bool squashed);
+    void retireSquashed(ThreadID tid, void *bp_history);
+    unsigned getGHR(ThreadID tid, void *bp_history) const;
+
+  private:
+    void updateGlobalHistReg(ThreadID tid, bool taken);
+
+    struct BPHistory {
+        unsigned globalHistoryReg;
+        // was the taken array's prediction used?
+        // true: takenPred used
+        // false: notPred used
+        //bool takenUsed;
+        // prediction of the taken array
+        // true: predict taken
+        // false: predict not-taken
+        //bool takenPred;
+        // prediction of the not-taken array
+        // true: predict taken
+        // false: predict not-taken
+        //bool notTakenPred;
+        // the final taken/not-taken prediction
+        // true: predict taken
+        // false: predict not-taken
+        bool finalPred;
+    };
+
+    // choice predictors
+    //std::vector<SatCounter> choiceCounters;
+    // taken direction predictors
+    std::vector<SatCounter> takenCounters;
+    // not-taken direction predictors
+    //std::vector<SatCounter> notTakenCounters;
+
+    std::vector<unsigned> globalHistoryReg;
+    unsigned globalHistoryBits;
+    unsigned historyRegisterMask;
+
+    //unsigned choicePredictorSize;
+    unsigned choiceCtrBits;
+    //unsigned choiceHistoryMask;
+    unsigned globalPredictorSize;
+    unsigned globalCtrBits;
+    unsigned globalHistoryMask;
+
+    //unsigned choiceThreshold;
+    unsigned takenThreshold;
+    //unsigned notTakenThreshold;
+};
+
+#endif // __CPU_PRED_GSHARE_PRED_HH__
diff --git a/src/cpu/pred/yags.cc b/src/cpu/pred/yags.cc
new file mode 100644
--- /dev/null
+++ b/src/cpu/pred/yags.cc
@@ -0,0 +1,514 @@
+/*
+ * Copyright (c) 2014 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Anthony Gutierrez
+ */
+
+/* @file
+ * Implementation of a bi-mode branch predictor
+ */
+
+#include "base/bitfield.hh"
+#include "base/intmath.hh"
+#include "cpu/pred/yags.hh"
+
+YagsBP::YagsBP(const YagsBPParams *params)
+    : BPredUnit(params),
+      globalHistoryReg(params->numThreads, 0),
+      globalHistoryBits(ceilLog2(params->globalPredictorSize)),
+      choicePredictorSize(params->choicePredictorSize),
+      choiceCtrBits(params->choiceCtrBits),
+      globalPredictorSize(params->globalPredictorSize),
+      globalCtrBits(params->globalCtrBits)
+{
+    if (!isPowerOf2(choicePredictorSize))
+        fatal("Invalid choice predictor size.\n");
+    if (!isPowerOf2(globalPredictorSize))
+        fatal("Invalid global history predictor size.\n");
+
+    choiceCounters.resize(choicePredictorSize);
+    takenCounters.resize(globalPredictorSize);
+    notTakenCounters.resize(globalPredictorSize);
+    takenLRU.resize(globalPredictorSize/2);    
+    notTakenLRU.resize(globalPredictorSize/2);
+    takenTags.resize(globalPredictorSize);
+    notTakenTags.resize(globalPredictorSize);
+
+    for (int i = 0; i < choicePredictorSize; ++i) {
+        choiceCounters[i].setBits(choiceCtrBits);
+    }
+    for (int i = 0; i < globalPredictorSize; ++i) {
+        takenCounters[i].setBits(globalCtrBits);
+        notTakenCounters[i].setBits(globalCtrBits);
+        takenTags[i] = 0;
+        notTakenTags[i] = 0;
+    }
+    for (int i = 0; i < globalPredictorSize / 2; ++i) {
+        takenLRU[i] = true;
+        notTakenLRU[i] = true;
+    }
+
+    historyRegisterMask = mask(globalHistoryBits);
+    choiceHistoryMask = choicePredictorSize - 1;
+    globalHistoryMask = globalPredictorSize - 1;
+
+    choiceThreshold = (ULL(1) << (choiceCtrBits - 1)) - 1;
+    takenThreshold = (ULL(1) << (choiceCtrBits - 1)) - 1;
+    notTakenThreshold = (ULL(1) << (choiceCtrBits - 1)) - 1;
+}
+
+/*
+ * For an unconditional branch we set its history such that
+ * everything is set to taken. I.e., its choice predictor
+ * chooses the taken array and the taken array predicts taken.
+ */
+void
+YagsBP::uncondBranch(ThreadID tid, Addr pc, void * &bpHistory)
+{
+    BPHistory *history = new BPHistory;
+    history->globalHistoryReg = globalHistoryReg[tid];
+    history->takenUsed = 0;
+    history->choicePred = true;
+    history->takenPred = true;
+    history->notTakenPred = true;
+    history->finalPred = true;
+    bpHistory = static_cast<void*>(history);
+    updateGlobalHistReg(tid, true);
+}
+
+void
+YagsBP::squash(ThreadID tid, void *bpHistory)
+{
+    BPHistory *history = static_cast<BPHistory*>(bpHistory);
+    globalHistoryReg[tid] = history->globalHistoryReg;
+
+    delete history;
+}
+
+/*
+ * Here we lookup the actual branch prediction. We use the PC to
+ * identify the bias of a particular branch, which is based on the
+ * prediction in the choice array. A hash of the global history
+ * register and a branch's PC is used to index into both the taken
+ * and not-taken predictors, which both present a prediction. The
+ * choice array's prediction is used to select between the two
+ * direction predictors for the final branch prediction.
+ */
+bool
+YagsBP::lookup(ThreadID tid, Addr branchAddr, void * &bpHistory)
+{
+    unsigned choiceHistoryIdx = ((branchAddr >> instShiftAmt)
+                                & choiceHistoryMask);
+    unsigned globalHistoryIdx = (((branchAddr >> instShiftAmt)
+                                ^ globalHistoryReg[tid])
+                                & globalHistoryMask);
+    //1024 different sets instead of 2048
+    unsigned LRUIdx = (((branchAddr >> (instShiftAmt + 1))
+                                ^ globalHistoryReg[tid])
+                                & (globalHistoryMask >> 1));
+
+    //10 bits index
+    Addr tag = branchAddr >> (instShiftAmt + 10);
+
+    assert(choiceHistoryIdx < choicePredictorSize);
+    assert(globalHistoryIdx < globalPredictorSize);
+    assert(LRUIdx < globalPredictorSize / 2);
+
+    bool choicePrediction = choiceCounters[choiceHistoryIdx].read()
+                            > choiceThreshold;
+    bool takenGHBPrediction = takenCounters[globalHistoryIdx].read()
+                              > takenThreshold;
+    bool notTakenGHBPrediction = notTakenCounters[globalHistoryIdx].read()
+                                 > notTakenThreshold;
+    bool finalPrediction;
+
+    BPHistory *history = new BPHistory;
+    history->globalHistoryReg = globalHistoryReg[tid];
+
+    history->choicePred = choicePrediction;
+    history->takenPred = takenGHBPrediction;
+    history->notTakenPred = notTakenGHBPrediction;
+    /*history->takenUsed = choicePrediction;
+
+    if (choicePrediction) {
+        finalPrediction = takenGHBPrediction;
+    } else {
+        finalPrediction = notTakenGHBPrediction;
+    }
+
+    history->finalPred = finalPrediction;*/
+    if(choicePrediction) {
+        if(hitInNotTaken(tag, LRUIdx)) {
+            finalPrediction = notTakenGHBPrediction;
+            history->takenUsed = 2;
+        }
+        else {
+            finalPrediction = choicePrediction;
+            history->takenUsed = 0;
+        }
+    }
+    else {
+        if(hitInTaken(tag, LRUIdx)) {
+            finalPrediction = takenGHBPrediction;
+            history->takenUsed = 1;
+        }
+        else {
+            finalPrediction = choicePrediction;
+            history->takenUsed = 0;
+        }
+    }
+
+    history->finalPred = finalPrediction;
+    bpHistory = static_cast<void*>(history);
+    updateGlobalHistReg(tid, finalPrediction);
+
+    return finalPrediction;
+}
+
+void
+YagsBP::btbUpdate(ThreadID tid, Addr branchAddr, void * &bpHistory)
+{
+    globalHistoryReg[tid] &= (historyRegisterMask & ~ULL(1));
+}
+
+/* Only the selected direction predictor will be updated with the final
+ * outcome; the status of the unselected one will not be altered. The choice
+ * predictor is always updated with the branch outcome, except when the
+ * choice is opposite to the branch outcome but the selected counter of
+ * the direction predictors makes a correct final prediction.
+ */
+void
+YagsBP::update(ThreadID tid, Addr branchAddr, bool taken, void *bpHistory,
+                 bool squashed)
+{
+    if (bpHistory) {
+        BPHistory *history = static_cast<BPHistory*>(bpHistory);
+
+        unsigned choiceHistoryIdx = ((branchAddr >> instShiftAmt)
+                                    & choiceHistoryMask);
+        unsigned globalHistoryIdx = (((branchAddr >> instShiftAmt)
+                                    ^ history->globalHistoryReg)
+                                    & globalHistoryMask);
+        unsigned LRUIdx = (((branchAddr >> (instShiftAmt + 1))
+                                ^ history->globalHistoryReg)
+                                    & (globalHistoryMask >> 1));
+
+
+        assert(choiceHistoryIdx < choicePredictorSize);
+        assert(globalHistoryIdx < globalPredictorSize);
+        assert(LRUIdx < globalPredictorSize / 2);
+
+        Addr tag = branchAddr >> (instShiftAmt + 10);
+        bool updateTaken = false;
+        bool updateNotTaken =false;
+
+
+        //if the final prediction is from the choice counter
+        /*if(history->takenUsed == 0) {
+            if(taken) {
+                choiceCounters[choiceHistoryIdx].increment();
+            }
+            else{
+                choiceCounters[choiceHistoryIdx].decrement();
+            }
+        }*/
+
+        //if choice indicates taken and the outcome is not taken, store bias in not taken cache
+        if(history->choicePred) {
+            if(!taken)
+                updateNotTaken = true;
+        }
+        else {
+            if(taken)
+                updateTaken = true;
+        }
+
+
+        if(history->takenUsed == 1) {
+            updateTaken = true;
+        }
+
+        if(history->takenUsed == 2) {
+            updateNotTaken = true;
+        }
+
+        if(updateTaken)            
+            updateTakenCacheValue(tag, LRUIdx, globalHistoryIdx, taken); 
+        if(updateNotTaken)
+            updateNotTakenCacheValue(tag, LRUIdx, globalHistoryIdx, taken); 
+    /*  if (history->takenUsed) {
+            // if the taken array's prediction was used, update it
+            if (taken) {
+                takenCounters[globalHistoryIdx].increment();
+            } else {
+                takenCounters[globalHistoryIdx].decrement();
+            }
+        } else {
+            // if the not-taken array's prediction was used, update it
+            if (taken) {
+                notTakenCounters[globalHistoryIdx].increment();
+            } else {
+                notTakenCounters[globalHistoryIdx].decrement();
+            }
+        }*/
+
+        if (history->finalPred == taken) {
+            /* If the final prediction matches the actual branch's
+             * outcome and the choice predictor matches the final
+             * outcome, we update the choice predictor, otherwise it
+             * is not updated. While the designers of the bi-mode
+             * predictor don't explicity say why this is done, one
+             * can infer that it is to preserve the choice predictor's
+             * bias with respect to the branch being predicted; afterall,
+             * the whole point of the bi-mode predictor is to identify the
+             * atypical case when a branch deviates from its bias.
+             */
+            if ((history->finalPred == true && history->takenUsed == 1) || (history->finalPred == false && history->takenUsed == 2)) {
+                if (taken) {
+                    choiceCounters[choiceHistoryIdx].increment();
+                } else {
+                    choiceCounters[choiceHistoryIdx].decrement();
+                }
+            }
+        } else {
+            // always update the choice predictor on an incorrect prediction
+            if (taken) {
+                choiceCounters[choiceHistoryIdx].increment();
+            } else {
+                choiceCounters[choiceHistoryIdx].decrement();
+            }
+        }
+
+
+        if (squashed) {
+            if (taken) {
+                globalHistoryReg[tid] = (history->globalHistoryReg << 1) | 1;
+            } else {
+                globalHistoryReg[tid] = (history->globalHistoryReg << 1);
+            }
+            globalHistoryReg[tid] &= historyRegisterMask;
+        } else {
+            delete history;
+        }
+    }
+}
+
+void
+YagsBP::retireSquashed(ThreadID tid, void *bp_history)
+{
+    BPHistory *history = static_cast<BPHistory*>(bp_history);
+    delete history;
+}
+
+unsigned
+YagsBP::getGHR(ThreadID tid, void *bp_history) const
+{
+    return static_cast<BPHistory*>(bp_history)->globalHistoryReg;
+}
+
+void
+YagsBP::updateGlobalHistReg(ThreadID tid, bool taken)
+{
+    globalHistoryReg[tid] = taken ? (globalHistoryReg[tid] << 1) | 1 :
+                               (globalHistoryReg[tid] << 1);
+    globalHistoryReg[tid] &= historyRegisterMask;
+}
+
+
+bool
+YagsBP::hitInTaken(Addr tag, unsigned idx)
+{
+    for(int i = 0; i < 2; i++) {
+        if(tag == takenTags[idx * 2 + i]) {
+            if(i == 0)
+                takenLRU[idx] = false;
+            else
+                takenLRU[idx] = true;
+            return true;
+        }
+    }
+    return false;
+}
+
+bool
+YagsBP::hitInNotTaken(Addr tag, unsigned idx)
+{
+    for(int i = 0; i < 2; i++) {
+        if(tag == notTakenTags[idx * 2 + i]) {
+            if(i == 0)
+                notTakenLRU[idx] = false;
+            else
+                notTakenLRU[idx] = true;
+            return true;
+        }
+    }
+    return false;
+}
+
+void
+YagsBP::updateNotTakenCache(Addr tag, unsigned idx, unsigned global_idx)
+{
+    if(hitInNotTaken(tag, idx)) {
+        for(int i = 0; i < 2; i++) {
+            if(tag == notTakenTags[idx * 2 + i]) {
+                if(i == 0) 
+                    notTakenLRU[idx] = false;
+                else 
+                    notTakenLRU[idx] = true;
+                notTakenCounters[global_idx].decrement();                
+            }
+        }    
+    }
+    else {
+        //line 0 is least recently used
+        if(notTakenLRU[idx]) {
+            notTakenTags[idx * 2] = tag;
+            notTakenLRU[idx] = false;
+        }
+        else {
+            notTakenTags[idx * 2 + 1] = tag;
+            notTakenLRU[idx] = true;
+        }
+        notTakenCounters[global_idx].setBits(globalCtrBits);
+        notTakenCounters[global_idx].decrement();
+    }
+}
+
+
+void
+YagsBP::updateTakenCache(Addr tag, unsigned idx, unsigned global_idx)
+{
+    if(hitInTaken(tag, idx)) {
+        for(int i = 0; i < 2; i++) {
+            if(tag == takenTags[idx * 2 + i]) {
+                if(i == 0) 
+                    takenLRU[idx] = false;
+                else 
+                    takenLRU[idx] = true;
+                takenCounters[global_idx].increment();                
+            }
+        }    
+    }
+    else {
+        //line 0 is least recently used
+        if(takenLRU[idx]) {
+            takenTags[idx * 2] = tag;
+            takenLRU[idx] = false;
+        }
+        else {
+            takenTags[idx * 2 + 1] = tag;
+            takenLRU[idx] = true;
+        }
+        takenCounters[global_idx].setBits(globalCtrBits);
+        takenCounters[global_idx].increment();
+    }
+}
+
+
+void
+YagsBP::updateTakenCacheValue(Addr tag, unsigned idx, unsigned global_idx, bool taken)
+{
+    if(hitInTaken(tag, idx)) {
+        for(int i = 0; i < 2; i++) {
+            if(tag == takenTags[idx * 2 + i]) {
+                if(i == 0) 
+                    takenLRU[idx] = false;
+                else 
+                    takenLRU[idx] = true;
+                if(taken)
+                    takenCounters[global_idx].increment(); 
+                if(!taken)
+                    takenCounters[global_idx].decrement();
+                if(takenCounters[global_idx].read() <= takenThreshold)
+                    takenLRU[idx] = !takenLRU[idx];                       
+            }
+        }    
+    }
+    else {
+        //line 0 is least recently used
+        if(takenLRU[idx]) {
+            takenTags[idx * 2] = tag;
+            takenLRU[idx] = false;
+        }
+        else {
+            takenTags[idx * 2 + 1] = tag;
+            takenLRU[idx] = true;
+        }
+        takenCounters[global_idx].setBits(globalCtrBits);
+        if(taken)
+            takenCounters[global_idx].increment(); 
+        if(!taken)
+            takenCounters[global_idx].decrement();
+        if(takenCounters[global_idx].read() <= takenThreshold)
+            takenLRU[idx] = !takenLRU[idx];
+    }
+}
+
+void
+YagsBP::updateNotTakenCacheValue(Addr tag, unsigned idx, unsigned global_idx, bool taken)
+{
+    if(hitInNotTaken(tag, idx)) {
+        for(int i = 0; i < 2; i++) {
+            if(tag == notTakenTags[idx * 2 + i]) {
+                if(i == 0) 
+                    notTakenLRU[idx] = false;
+                else 
+                    notTakenLRU[idx] = true;
+                if(taken)
+                    notTakenCounters[global_idx].increment(); 
+                if(!taken)
+                    notTakenCounters[global_idx].decrement();
+                if(notTakenCounters[global_idx].read() <= notTakenThreshold)
+                    notTakenLRU[idx] = !notTakenLRU[idx];                       
+            }
+        }    
+    }
+    else {
+        //line 0 is least recently used
+        if(notTakenLRU[idx]) {
+            notTakenTags[idx * 2] = tag;
+            notTakenLRU[idx] = false;
+        }
+        else {
+            notTakenTags[idx * 2 + 1] = tag;
+            notTakenLRU[idx] = true;
+        }
+        notTakenCounters[global_idx].setBits(globalCtrBits);
+        if(taken)
+            notTakenCounters[global_idx].increment(); 
+        if(!taken)
+            notTakenCounters[global_idx].decrement();
+        if(notTakenCounters[global_idx].read() <= notTakenThreshold)
+            notTakenLRU[idx] = !notTakenLRU[idx];
+    }
+}
+
+YagsBP*
+YagsBPParams::create()
+{
+    return new YagsBP(this);
+}
diff --git a/src/cpu/pred/yags.hh b/src/cpu/pred/yags.hh
new file mode 100644
--- /dev/null
+++ b/src/cpu/pred/yags.hh
@@ -0,0 +1,138 @@
+/*
+ * Copyright (c) 2014 The Regents of The University of Michigan
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Anthony Gutierrez
+ */
+
+/* @file
+ * Implementation of a bi-mode branch predictor
+ */
+
+#ifndef __CPU_PRED_YAGS_PRED_HH__
+#define __CPU_PRED_YAGS_PRED_HH__
+
+#include "cpu/pred/bpred_unit.hh"
+#include "cpu/pred/sat_counter.hh"
+#include "params/YagsBP.hh"
+
+/**
+ * Implements a bi-mode branch predictor. The bi-mode predictor is a two-level
+ * branch predictor that has three seprate history arrays: a taken array, a
+ * not-taken array, and a choice array. The taken/not-taken arrays are indexed
+ * by a hash of the PC and the global history. The choice array is indexed by
+ * the PC only. Because the taken/not-taken arrays use the same index, they must
+ * be the same size.
+ *
+ * The bi-mode branch predictor aims to eliminate the destructive aliasing that
+ * occurs when two branches of opposite biases share the same global history
+ * pattern. By separating the predictors into taken/not-taken arrays, and using
+ * the branch's PC to choose between the two, destructive aliasing is reduced.
+ */
+
+class YagsBP : public BPredUnit
+{
+  public:
+    YagsBP(const YagsBPParams *params);
+    void uncondBranch(ThreadID tid, Addr pc, void * &bp_history);
+    void squash(ThreadID tid, void *bp_history);
+    bool lookup(ThreadID tid, Addr branch_addr, void * &bp_history);
+    void btbUpdate(ThreadID tid, Addr branch_addr, void * &bp_history);
+    void update(ThreadID tid, Addr branch_addr, bool taken, void *bp_history,
+                bool squashed);
+    void retireSquashed(ThreadID tid, void *bp_history);
+    unsigned getGHR(ThreadID tid, void *bp_history) const;
+
+
+  private:
+    void updateGlobalHistReg(ThreadID tid, bool taken);
+    bool hitInTaken(Addr tag, unsigned idx);
+    bool hitInNotTaken(Addr tag, unsigned idx);
+    void updateTakenCache(Addr tag, unsigned idx, unsigned global_idx);
+    void updateNotTakenCache(Addr tag, unsigned idx, unsigned global_idx);
+    void updateTakenCacheValue(Addr tag, unsigned idx, unsigned global_idx, bool taken);
+    void updateNotTakenCacheValue(Addr tag, unsigned idx, unsigned global_idx, bool taken);
+
+    struct BPHistory {
+        unsigned globalHistoryReg;
+        // was the taken array's prediction used?
+        // 0: choice used
+        // 1: takenPred used
+        // 2: notPred used
+        unsigned takenUsed;
+        // prediction of the choice array
+        // true: predict taken
+        // false: predict not-taken
+        bool choicePred;
+        // prediction of the taken array
+        // true: predict taken
+        // false: predict not-taken
+        bool takenPred;
+        // prediction of the not-taken array
+        // true: predict taken
+        // false: predict not-taken
+        bool notTakenPred;
+        // the final taken/not-taken prediction
+        // true: predict taken
+        // false: predict not-taken
+        bool finalPred;
+    };
+
+
+    // choice predictors
+    std::vector<SatCounter> choiceCounters;
+    // taken direction predictors
+    std::vector<SatCounter> takenCounters;
+    std::vector<Addr> takenTags;
+    // not-taken direction predictors
+    std::vector<SatCounter> notTakenCounters;
+    std::vector<Addr> notTakenTags;
+
+
+    //taken counter LRU
+    //true: way 0 is least recently used
+    //false: way 1 is least recently used
+    std::vector<bool> takenLRU;
+    //not taken counter LRU
+    std::vector<bool> notTakenLRU;
+
+    std::vector<unsigned> globalHistoryReg;
+    unsigned globalHistoryBits;
+    unsigned historyRegisterMask;
+
+    unsigned choicePredictorSize;
+    unsigned choiceCtrBits;
+    unsigned choiceHistoryMask;
+    unsigned globalPredictorSize;
+    unsigned globalCtrBits;
+    unsigned globalHistoryMask;
+
+    unsigned choiceThreshold;
+    unsigned takenThreshold;
+    unsigned notTakenThreshold;
+};
+
+#endif // __CPU_PRED_YAGS_PRED_HH__
